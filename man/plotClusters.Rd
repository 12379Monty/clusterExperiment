% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/plotClusters.R
\docType{methods}
\name{plotClusters}
\alias{makeAnnoColor}
\alias{plotClusters}
\alias{plotClusters,ClusterExperiment,missing-method}
\alias{plotClusters,ClusterExperiment,numeric-method}
\alias{plotClusters,matrix,missing-method}
\alias{plotClusters,matrix,numeric-method}
\title{Functions for Visualizing assigments of samples to clusters across multiple clusterings}
\usage{
plotClusters(clusters, orderClusters, ...)

\S4method{plotClusters}{ClusterExperiment,character}(clusters,
  orderClusters = c("pipeline", "all"), ...)

\S4method{plotClusters}{ClusterExperiment,numeric}(clusters, orderClusters, ...)

\S4method{plotClusters}{ClusterExperiment,missing}(clusters, orderClusters, ...)

\S4method{plotClusters}{matrix,missing}(clusters, orderClusters, ...)

\S4method{plotClusters}{matrix,numeric}(clusters, orderClusters,
  orderSamples = NULL, metaData = NULL, reuseColors = FALSE,
  matchToTop = FALSE, plot = TRUE, unassignedColor = "white",
  missingColor = "grey", minRequireColor = 0.3, startNewColors = FALSE,
  colPalette = bigPalette, input = c("clusters", "colors"),
  clNames = colnames(clusters), add = FALSE, xCoord = NULL, ylim = NULL,
  tick = FALSE, ylab = "", xlab = "", axisLine = 0, box = FALSE, ...)

makeAnnoColor(trackingOut)
}
\arguments{
\item{clusters}{A matrix of with each column corresponding to a clustering and
each row a sample. The plotting will plot them in order of this matrix,
and their order influences the plot greatly.}

\item{orderClusters}{If numeric, a predefined order for the clusterings in the plot. If x is a ClusterExperiment object, orderClusters can be a character value identifying the clusterTypes to be used; alternatively orderClusters can be either 'all' or 'pipeline' to indicate choosing all clusters or choosing all pipelineClusters.}

\item{...}{for \code{plotClusters} arguments passed to \code{\link{plot}} if \code{add=FALSE}.}

\item{orderSamples}{A predefined order in which the samples will be plotted. Otherwise the order will be found internally by aligning the clusters (assuming \code{input="clusters"})}

\item{metaData}{Additional cluster/metaData on the samples to be plotted with the clusterings in clusters. Values in metaData will be added to the end (bottom) of the plot.}

\item{reuseColors}{Logical. Whether each row should consist of the same set
of colors. By default (FALSE) each cluster that the algorithm doesn't
identify to the previous rows clusters gets a new color}

\item{matchToTop}{Logical as to whether all clusters should be aligned to
the first row. By default (FALSE) each cluster is aligned to the ordered
clusters of the row above it.}

\item{plot}{Logical as to whether a plot should be produced.}

\item{unassignedColor}{If ``-1'' in clusters, will be given this color (meant for samples not assigned to cluster).}

\item{missingColor}{If ``-2'' in clusters, will be given this color (meant for samples that were missing from the clustering, mainly when comparing clusterings run on different sets of samples)}

\item{minRequireColor}{In aligning colors between rows of clusters, require
this percent overlap}

\item{startNewColors}{logical, indicating whether in aligning colors between rows of clusters, 
should the colors restart at beginning of colPalette as long as colors are not in immediately proceeding row
(some of the colors at the end of bigPalette are a bit wonky, and so if you
have a large clusters matrix, this can be useful)}

\item{colPalette}{a vector of colors used for the different clusters. Must be as long as the maximum number of clusters found in any single clustering/column given in \code{clusters} or will otherwise return an error.}

\item{input}{indicate whether the input matrix is matrix of integer assigned clusters, or contains the colors. If \code{input="colors"}, then the object \code{clusters} is a matrix of colors and there is no alignment (this option allows the user to manually adjust the colors and replot, for example)}

\item{clNames}{names to go with the columns (clusterings) in matrix colorMat}

\item{add}{whether to add to existing plot}

\item{xCoord}{values on x-axis at which to plot the rows (samples)}

\item{ylim}{vector of limits of y-axis}

\item{tick}{logical, whether to draw ticks on x-axis for each sample.}

\item{ylab}{character string for the label of y-axis}

\item{xlab}{character string for the label of x-axis}

\item{axisLine}{the number of lines in the axis labels on y-axis should be (passed to line=... in the axis call)}

\item{box}{logical, whether to draw box around the plot}

\item{trackingOut}{the output from \code{\link{plotClusters}}}
}
\value{
plotClusters returns (invisibly) the orders and other things that
go into making the matrix. Specifically, a list with the following elements
\itemize{

\item{\code{index}}{ a vector of length equal to ncols(clusters) giving the order of the columns to use to get the original clusters matrix into the order made by plotClusters}

\item{\code{colors}}{ matrix of color assignments for each element of original clusters matrix. Matrix is in the same order as original clusters matrix. The matrix \code{colors[index,]} is the matrix that can be given back to plotClusters to recreate the plot (see examples)}

\item{\code{aligned}}{ matrix of integer valued cluster assignments that match the colors. This is useful if you want to have cluster identification numbers that are better aligned than that given in the original clusters. Again, the matrix is in same order as original input matrix}

\item{\code{groupToColorLegend}}{ list of length equal to the number of columns of input matrix. The elements of the list are matrices, each with three columns named "Original","Aligned", and "Color" giving, respectively, the correspondence between the original cluster ids in \code{clusters}, the aligned cluster ids in \code{aligned}, and the color. }
}
}
\description{
Align multiple clusters of the same set of samples and provide a color-coded plot of their shared cluster assignments

Make color annotation for input to plotHeatmap from output of plotClusters
}
\details{
If orderClusters="pipeline", then the pipeline clusterings will be plotted in the following order: final, mergeClusters, findSharedClusters, clusterMany.
}
\examples{
#clustering using pam: try using different dimensions of pca and different k
cl <- clusterMany(simData,dimReduce="PCA",nPCADims=ps,
     clusterMethod="pam",ks=2:4,findBestK=c(TRUE,FALSE))
clusterLabels(cl) 
#make names shorter for better plotting
x<-clusterLabels(cl)
x<-gsub("TRUE","T",x)
x<-gsub("FALSE","F",x)
x<-gsub("k=NA,","",x)
x<-gsub("Features","",x)
clusterLabels(cl)<-x
par(mar=c(2,10,1,1))
out<-plotClusters(cl,axisLine=-1)
out$groupToColorLegend[1:2]
head(out$color[out$orderSamples,1:2])

#We can also change the order of the clusterings. Notice how this dramatically changes the plot!
plotClusters(cl, orderClusters=c(3:6,1:2,7:ncol(allClusters(cl))),axisLine=-2)

#notice that the blue and orange are really arbitrarily different 
#colors because not next to each other in row.
#We can manually change the blue to orange :
#first find out color names by looking at the out$colors (but in right order using out$orderSamples)
out$colors[out$orderSamples[1:10],c("nPCA=5,findBestK=T","nPCA=5,k=3,findBestK=F")]
#change "#1F78B4" to "#FF7F00"
newColorMat<-out$colors
newColorMat[newColorMat=="#1F78B4"]<-"#FF7F00"
#replot by setting 'input="colors"'
plotClusters(newColorMat[out$orderSamples,],input="colors")

#set some of clusterings arbitrarily to "-1", meaning not clustered (white), and "-2" (another possible designation getting gray, usually for samples not included in original clustering)
clMatNew<-apply(allClusters(cl),2,function(x){
wh<-sample(1:nSamples(cl),size=10)
x[wh]<- -1
wh<-sample(1:nSamples(cl),size=10)
x[wh]<- -2
return(x)
})
#make a new object
cl2<-clusterExperiment(assay(cl),clMatNew,transformation=transformation(cl))
plotClusters(cl2)
}
\author{
Elizabeth Purdom and Marla Johnson
}
\seealso{
consensusClustering package
}

