% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getGenes.R
\name{getBestGenes}
\alias{getBestGenes}
\title{Function for finding best genes associated with clusters}
\usage{
getBestGenes(cl, dat, type = c("F", "Dendro", "Pairs", "OneAgainstAll"),
  dendro = NULL, pairMat = NULL, returnType = c("Table", "Index"),
  contrastAdj = c("All", "PerContrast", "AfterF"), ...)
}
\arguments{
\item{cl}{A vector with cluster assignments to compare to clRef.``-1'' indicates the sample was not assigned to a cluster.}

\item{dat}{data for the test, samples in rows}

\item{type}{What type of test to do. `F' gives the omnibus F-statistic, `Dendro' traverses the given dendrogram and does contrasts of the samples in each side,  `Pairs' does pair-wise contrasts based on the pairs given in pairMat (if pairMat=NULL, does all pairwise), and `OneAgainstAll' compares each cluster to the average of all others.}

\item{dendro}{The dendrogram to traverse if type="Dendro". Note that this should be the dendrogram of the clusters, not of the individual samples.}

\item{pairMat}{matrix giving the pairs of clusters for which to do pair-wise contrasts (must match to elements of cl). If NULL, will do all pairwise of the clusters in \code{cl} (excluding "-1" categories). Each row is a pair to be compared and must match the names of the clusters in the vector \code{cl}.}

\item{returnType}{Whether to return the index of genes, or the full table given by topTable or topTableF.}

\item{contrastAdj}{What type of FDR correction to do for contrasts tests (i.e. if type='Dendro' or 'Pairs').}

\item{...}{options to pass to \code{\link{topTable}} or \code{\link{topTableF}} (see \code{\link{limma}} package)}
}
\value{
A data.frame in the same format as \code{\link{topTable}}, except that the column name \code{ProbeID} is changed to \code{Gene} and a column \code{IndexInOriginal} is provided to give the row index of the gene in the original dataset.
}
\description{
Calls limma on input data to determine genes most associated with found clusters (either pairwise comparisons, or following a tree that clusters the clusters).
}
\details{
getBestGenes returns best genes corresponding to a cluster assignment. It uses limma to fit the models, and limma's functions topTable or topTableF to find the best genes.  See the options of these functions to put better control on what gets returned (e.g. only if significant, only if log-fc is above a certain amount, etc.). In particular, set 'number=' to define how many significant genes to return (where number is per contrast for the 'Pairs' or 'Dendro' option)

When 'type' argument implies that the best genes should be found via contrasts (i.e. 'type' is 'Dendro' or 'Pairs'), then then 'contrastAdj' determines the type of multiple testing correction to perform. 
'PerContrast' does FDR correction for each set of contrasts, and does not guarantee control across all the different contrasts (so probably not the preferred method). 
'All' calculates the corrected p-values based on FDR correction of all of the contrasts tested. 'AfterF' controls the FDR based on a hierarchical scheme that only tests the contrasts in those genes where the omnibus F statistic is significant.  If the user selects 'AfterF', the user must also supply an option 'p.value' to have any effect, and then only those significant at that p.value level will be returned. Note that currently the correction for 'AfterF' is not guaranteed to control the FDR; improvements will be added in the future.

Note that the default option for \code{\link{topTable}} is to not filter based on adjusted p-values (\code{p.value=1}) and return only the top 10 most significant (\code{number=10}) -- these are options the user can change (these arguments are passed via the \code{...} in getBestGenes). In particular, it only makes sense to set \code{requireF=TRUE} if \code{p.value} is meaningful (e.g. 0.1 or 0.05); the default value of \code{p.value=1} will not result in any effect on the adjusted p-value otherwise.
}
\examples{
data(simData)
#create a clustering, for 8 clusters (truth was 4)
cl<-clusterAll(simData,clusterFunction="pam",subsample=FALSE,
sequential=FALSE, clusterDArgs=list(k=8))$cl
#basic F test, return all, even if not significant:
testF<-getBestGenes(cl,simData,type="F",number=nrow(simData))
#Do all pairwise, only return significant, try different adjustments:
pairsPerC<-getBestGenes(cl,simData,type="Pairs",contrastAdj="PerContrast",p.value=0.05,)
pairsAfterF<-getBestGenes(cl,simData,type="Pairs",contrastAdj="AfterF",p.value=0.05,)
pairsAll<-getBestGenes(cl,simData,type="Pairs",contrastAdj="All",p.value=0.05,)
#not useful for this silly example, but could look at overlap with Venn
allGenes<-paste("Row",1:nrow(simData),sep="")
if(require(limma)){
vennC<-vennCounts(cbind(PerContrast=allGenes\%in\%pairsPerC$Gene,AllJoint=allGenes\%in\%pairsAll$Gene,FHier=allGenes\%in\% pairsAfterF$Gene))
vennDiagram(vennC,main="FDR Overlap")
}
#Do one cluster against all others
oneAll<-getBestGenes(cl,simData,type="OneAgainstAll",contrastAdj="All",p.value=0.05)
#Do dendrogram testing
hcl<-clusterHclust(dat=simData,cl,full=FALSE)
allDendro<-getBestGenes(cl=cl,dat=simData,type="Dendro",dendro=hcl,returnType=c("Table"),
contrastAdj=c("All"),number=ncol(dat),p.value=0.05)
}

